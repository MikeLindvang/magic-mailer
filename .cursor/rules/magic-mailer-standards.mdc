---
alwaysApply: true
description: Core engineering and architectural standards for Magic Mailer project
---

# Magic Mailer Project Standards

## ENGINEERING
**TypeScript Strict Mode**: All code must use strict TypeScript compilation with no `any` types. Use proper type definitions, interfaces, and generic constraints. Prefer type-safe patterns and explicit return types for all functions.

## BOUNDARIES
**Clean Architecture**: Separate concerns with clear boundaries - UI components in `/components`, business logic in `/lib`, API routes in `/app/api`, and data models as TypeScript interfaces. No direct database calls from components.

## API CONTRACT
**Zod + Typed JSON**: All API endpoints must use Zod schemas for validation and return typed JSON responses in format `{ok: true, data: T} | {ok: false, error: string}`. Input validation at API boundaries is mandatory.

## UI
**Tactile Design System**: Follow the established tactile design patterns using `tactile-*` classes, `font-headline`/`font-body` typography, and `bg-parchment`/`text-charcoal` color palette. All interactive elements require tactile feedback states.

## LLM
**Structured Integration**: LLM interactions must be type-safe with Zod validation, proper error handling, and structured prompts. Use streaming responses where appropriate and implement proper loading states.

## TESTS
**Type-Safe Testing**: All tests must be written in TypeScript with proper type assertions, covering API contracts, component behavior, and business logic with meaningful test descriptions and comprehensive coverage.

## AUTHENTICATION
**Clerk Protection**: All routes under `/projects` and `/api/*` require Clerk authentication middleware. Use `auth()` helper for server components and `useAuth()` for client components. Implement proper redirect flows for unauthenticated users.

## IMPLEMENTATION PATTERNS

### API Route Structure
```typescript
// app/api/example/route.ts
import { auth } from '@clerk/nextjs/server';
import { z } from 'zod';

const RequestSchema = z.object({
  name: z.string().min(1),
  email: z.string().email(),
});

export async function POST(request: Request) {
  const { userId } = await auth();
  if (!userId) {
    return Response.json({ ok: false, error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const body = await request.json();
    const validatedData = RequestSchema.parse(body);
    
    // Business logic here
    const result = await processData(validatedData);
    
    return Response.json({ ok: true, data: result });
  } catch (error) {
    return Response.json({ 
      ok: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    }, { status: 400 });
  }
}
```

### Protected Page Component
```typescript
// app/(dashboard)/projects/page.tsx
import { auth } from '@clerk/nextjs/server';
import { redirect } from 'next/navigation';

export default async function ProjectsPage() {
  const { userId } = await auth();
  if (!userId) {
    redirect('/sign-in');
  }

  return (
    <main className="bg-parchment bg-grain min-h-screen">
      <div className="tactile-card paper-texture p-8">
        <h1 className="font-headline text-charcoal text-4xl font-bold">
          Projects
        </h1>
      </div>
    </main>
  );
}
```

### Type-Safe API Response Types
```typescript
// lib/types.ts
export type ApiResponse<T> = 
  | { ok: true; data: T }
  | { ok: false; error: string };

export interface Project {
  id: string;
  name: string;
  createdAt: string;
  userId: string;
}

export type ProjectsResponse = ApiResponse<Project[]>;
```

### Component with Tactile Design
```typescript
// components/project-card.tsx
interface ProjectCardProps {
  project: Project;
  onSelect: (id: string) => void;
}

export function ProjectCard({ project, onSelect }: ProjectCardProps) {
  return (
    <div className="tactile-card paper-texture p-6 cursor-pointer"
         onClick={() => onSelect(project.id)}>
      <h3 className="font-headline text-charcoal text-xl font-semibold mb-2">
        {project.name}
      </h3>
      <p className="font-body text-charcoal/80 text-sm">
        Created {new Date(project.createdAt).toLocaleDateString()}
      </p>
    </div>
  );
}
```

## DEPENDENCIES REFERENCE
- **Authentication**: `@clerk/nextjs` for user management
- **Validation**: `zod` for schema validation  
- **State**: `zustand` for client state management
- **Data Fetching**: `@tanstack/react-query` for server state
- **Forms**: `react-hook-form` with Zod resolvers
- **UI**: Custom tactile components with Radix UI primitives